// Generated by CoffeeScript 1.3.3
var AggregateWorker, Connect, EventEmitter, FilterWorker, InjectWorker, ProjectWorker,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

EventEmitter = require('events').EventEmitter;

ProjectWorker = require('./project-worker');

InjectWorker = require('./inject-worker');

FilterWorker = require('./filter-worker');

AggregateWorker = require('./aggregate-worker');

Connect = (function(_super) {

  __extends(Connect, _super);

  function Connect(stream, worker, id, topology) {
    this.stream = stream;
    this.worker = worker;
    this.id = id;
    this.topology = topology;
    if (!this.stream) {
      throw new Error("Stream required");
    }
    Connect.__super__.constructor.call(this);
    if (this.id && this.topology) {
      this.topology.register(this.id, this);
    }
    this._sinks = [];
    this._initWorker();
    this._connectStream();
  }

  Connect.prototype._initWorker = function() {
    var _this = this;
    if (!this.worker) {
      return;
    }
    return this.worker.on("data:new", function(data) {
      return _this._emit(data);
    });
  };

  Connect.prototype._emit = function(data) {
    var sink, _i, _len, _ref, _results;
    this.emit("data:new", data);
    _ref = this._sinks;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      sink = _ref[_i];
      _results.push(sink(data));
    }
    return _results;
  };

  Connect.prototype.sink = function(handler) {
    return this._sinks.push(handler);
  };

  Connect.prototype.filter = function(fn, id) {
    return new Connect(this, new FilterWorker(fn), id, this.topology);
  };

  Connect.prototype.project = function(fn, id) {
    return new Connect(this, new ProjectWorker(fn), id, this.topology);
  };

  Connect.prototype.inject = function(fn, id) {
    return new Connect(this, new InjectWorker(fn), id, this.topology);
  };

  Connect.prototype.aggregate = function(aggregator, id) {
    return new Connect(this, new AggregateWorker(aggregator), id, this.topology);
  };

  Connect.prototype.process = function(data) {
    var _this = this;
    return process.nextTick(function() {
      return _this.worker.process(data);
    });
  };

  Connect.prototype._connectStream = function() {
    var _this = this;
    if (!this.stream) {
      return;
    }
    return this.stream.on("data:new", function(data) {
      return _this.process(data);
    });
  };

  return Connect;

})(EventEmitter);

module.exports = Connect;
