// Generated by CoffeeScript 1.3.3
var SlidingTimeWindow, SlidingWindow, Window,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Window = require('./window');

/*
#
# Windows accumulate a subset of a stream. Each window must
# implement the process method and emit "data:push" and "data:pop" events
#
*/


SlidingWindow = (function(_super) {

  __extends(SlidingWindow, _super);

  SlidingWindow.prototype._key = "slidingwindow";

  function SlidingWindow(n) {
    this.n = n;
    SlidingWindow.__super__.constructor.call(this);
  }

  SlidingWindow.prototype.purge = function() {
    throw new Error("Method must be implemented");
  };

  SlidingWindow.prototype.process = function(data) {
    throw new Error("Method must be implemented");
  };

  return SlidingWindow;

})(Window);

SlidingTimeWindow = (function(_super) {

  __extends(SlidingTimeWindow, _super);

  SlidingTimeWindow.prototype._key = "slidingtimewindow";

  SlidingTimeWindow.prototype._defaultPurgeInterval = 100;

  function SlidingTimeWindow(n, windowPurgeInterval) {
    this.n = n;
    this.windowPurgeInterval = windowPurgeInterval != null ? windowPurgeInterval : this._defaultPurgeInterval;
    if (this.n < 1) {
      throw new Error("Time interval must be greater than 1");
    }
    SlidingTimeWindow.__super__.constructor.call(this, this.n);
    this._initTicker();
  }

  SlidingTimeWindow.prototype._initTicker = function() {
    var _this = this;
    return this._interval = setInterval(function() {
      return _this.purge();
    }, this.windowPurgeInterval);
  };

  SlidingTimeWindow.prototype.purge = function() {
    var now,
      _this = this;
    now = Date.now();
    return this.store.get(this._key, function(error, _window) {
      var entry, i, _events, _i, _len;
      if (_window == null) {
        _window = [];
      }
      if (error) {
        throw error;
      }
      _events = [];
      for (i = _i = 0, _len = _window.length; _i < _len; i = ++_i) {
        entry = _window[i];
        if (now - entry.timestamp >= _this.n) {
          _events.push(entry.data);
        } else {
          break;
        }
      }
      if (_events.length > 0) {
        _window = _window.slice(i);
        return _this.store.put(_this._key, _window, function(error) {
          if (error) {
            throw error;
          }
          return _this.emit("data:pop", _events);
        });
      }
    });
  };

  SlidingTimeWindow.prototype.process = function(data) {
    var _this = this;
    return this.store.get(this._key, function(error, _window) {
      if (_window == null) {
        _window = [];
      }
      if (error) {
        throw error;
      }
      _window.push({
        data: data,
        timestamp: Date.now()
      });
      return _this.store.put(_this._key, _window, function(error) {
        if (error) {
          throw error;
        }
        return _this.emit("data:push", [data]);
      });
    });
  };

  return SlidingTimeWindow;

})(SlidingWindow);

module.exports = {
  SlidingTimeWindow: SlidingTimeWindow
};
