// Generated by CoffeeScript 1.3.3
var Aggregator, EventEmitter, MemoryStore, SingletoneWindow, async, uuid, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

EventEmitter = require('events').EventEmitter;

SingletoneWindow = require("./singleton-window");

MemoryStore = require('./store').MemoryStore;

uuid = require('./uuid');

async = require('async');

_ = require('underscore');

Aggregator = (function(_super) {

  __extends(Aggregator, _super);

  function Aggregator(config) {
    if (config == null) {
      config = {};
    }
    Aggregator.__super__.constructor.call(this);
    this.cumulative = config.cumulative, this.stats = config.stats, this.window = config.window;
    if (!this.stats) {
      this.stats = [];
    }
    if (this.cumulative === void 0) {
      this.cumulative = true;
    }
    if (!this.window) {
      this.window = new SingletoneWindow();
    }
    this._initWindowListeners();
  }

  Aggregator.prototype._initWindowListeners = function() {
    var _invokeStats,
      _this = this;
    _invokeStats = function(events, isAccumulate, callback) {
      var method, result;
      result = {};
      method = isAccumulate ? "accumulate" : "offset";
      return async.forEach(_this.stats, function(stat, cb) {
        return stat[method](events, function(error, data) {
          result = _.extend(result, data);
          return cb();
        });
      }, function(error) {
        return callback(error, result);
      });
    };
    this.window.on("data:push", function(events) {
      return _invokeStats(events, true, function(error, data) {
        if (error) {
          return;
        }
        return _this.emit("data:new", data);
      });
    });
    if (!this.cumulative) {
      return this.window.on("data:pop", function(events) {
        return _invokeStats(events, false, function(error, data) {
          if (error) {
            return;
          }
          if (!(_this.window instanceof SingletoneWindow)) {
            return _this.emit("data:new", data);
          }
        });
      });
    }
  };

  Aggregator.prototype.process = function(data) {
    var _this = this;
    return process.nextTick(function() {
      return _this.window.process(data);
    });
  };

  return Aggregator;

})(EventEmitter);

module.exports = Aggregator;
