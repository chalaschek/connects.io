// Generated by CoffeeScript 1.3.3
var InjectWorker, Worker,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Worker = require('./worker');

InjectWorker = (function(_super) {

  __extends(InjectWorker, _super);

  InjectWorker.prototype._id = "inject_worker";

  function InjectWorker(operator) {
    this.operator = operator;
    InjectWorker.__super__.constructor.call(this);
  }

  InjectWorker.prototype._extend = function(source, destination) {
    var key, val;
    if (destination == null) {
      destination = {};
    }
    for (key in source) {
      val = source[key];
      destination[key] = val;
    }
    return destination;
  };

  InjectWorker.prototype.process = function(data) {
    var _this = this;
    try {
      return this.operator(data, function(error, inject) {
        return _this.emit("event:new", _this._extend(inject, data));
      });
    } catch (e) {
      if (e) {
        return console.log("" + this._id + " error: " + e);
      }
    }
  };

  return InjectWorker;

})(Worker);

module.exports = InjectWorker;
