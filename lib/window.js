// Generated by CoffeeScript 1.4.0
var EventEmitter, Window,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

EventEmitter = require('events').EventEmitter;

/*
#
# Windows accumulate a subset of a stream. Each window must
# implement the process method and emit "event:push" and "event:pop" events
#
*/


Window = (function(_super) {

  __extends(Window, _super);

  function Window() {
    Window.__super__.constructor.call(this);
  }

  Window.prototype.events = function() {
    throw new Error("Method must be implemented");
  };

  Window.prototype.size = function() {
    throw new Error("Method must be implemented");
  };

  Window.prototype.process = function(data) {
    throw new Error("Method must be implemented");
  };

  return Window;

})(EventEmitter);

module.exports = Window;
