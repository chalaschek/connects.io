// Generated by CoffeeScript 1.3.3
var CountStat, MeanStat, MemoryStore, Stat, SumStat, uuid,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

uuid = require('./uuid');

MemoryStore = require('./store').MemoryStore;

Stat = (function() {

  Stat.prototype.defaultOutputName = "stat_name";

  function Stat(config) {
    this._id = uuid.uuid();
    this.aggregateField = config.aggregateField, this.outputName = config.outputName, this.cumulative = config.cumulative, this.store = config.store;
    if (!this.outputName) {
      this.outputName = this.defaultOutputName;
    }
    if (this.cumulative === null) {
      this.cumulative = true;
    }
    if (!this.store) {
      this.store = new MemoryStore();
    }
    if (!this.aggregateField) {
      throw new Error("Aggregate field must be specified");
    }
  }

  Stat.prototype.accumulate = function(newValue, callback) {
    throw new Error("Method must be implemented");
  };

  Stat.prototype.offset = function(oldValue, callback) {
    throw new Error("Method must be implemented");
  };

  return Stat;

})();

SumStat = (function(_super) {

  __extends(SumStat, _super);

  SumStat.prototype.defaultOutputName = "sum";

  function SumStat(config) {
    SumStat.__super__.constructor.call(this, config);
    this._key = "" + this._id + ":sum";
  }

  SumStat.prototype.accumulate = function(newValue, callback) {
    var _this = this;
    return this.store.get(this._key, function(error, curr) {
      var val;
      if (curr == null) {
        curr = 0;
      }
      if (error) {
        return callback(error);
      }
      val = curr + newValue;
      return _this.store.put(_this._key, val, function(error) {
        return callback(error, val);
      });
    });
  };

  SumStat.prototype.offset = function(oldValue, callback) {
    var _this = this;
    return this.store.get(this._key, function(error, curr) {
      var val;
      if (curr == null) {
        curr = 0;
      }
      if (error) {
        return callback(error);
      }
      if (_this.cumulative) {
        return callback(null, curr);
      }
      val = curr - oldValue;
      return _this.store.put(_this._key, val, function(error) {
        return callback(error, val);
      });
    });
  };

  return SumStat;

})(Stat);

CountStat = (function(_super) {

  __extends(CountStat, _super);

  CountStat.prototype.defaultOutputName = "count";

  function CountStat(config) {
    CountStat.__super__.constructor.call(this, config);
    this._key = "" + this._id + ":count";
  }

  CountStat.prototype.accumulate = function(newValue, callback) {
    var _this = this;
    return this.store.get(this._key, function(error, curr) {
      var val;
      if (curr == null) {
        curr = 0;
      }
      if (error) {
        return callback(error);
      }
      val = curr + 1;
      return _this.store.put(_this._key, val, function(error) {
        return callback(error, val);
      });
    });
  };

  CountStat.prototype.offset = function(oldValue, callback) {
    var _this = this;
    return this.store.get(this._key, function(error, curr) {
      var val;
      if (curr == null) {
        curr = 0;
      }
      if (error) {
        return callback(error);
      }
      if (_this.cumulative) {
        return callback(null, curr);
      }
      val = curr - 1;
      return _this.store.put(_this._key, val, function(error) {
        return callback(error, val);
      });
    });
  };

  return CountStat;

})(Stat);

MeanStat = (function(_super) {

  __extends(MeanStat, _super);

  MeanStat.prototype.defaultOutputName = "mean";

  function MeanStat(config) {
    MeanStat.__super__.constructor.call(this, config);
    this._key = "" + this._id + ":mean";
  }

  MeanStat.prototype.accumulate = function(newValue, callback) {
    var _this = this;
    return this.store.get(this._key, function(error, data) {
      if (data == null) {
        data = {
          n: 0,
          mean: 0
        };
      }
      if (error) {
        return callback(error);
      }
      data.mean = ((data.mean * data.n) + newValue) / (data.n + 1);
      data.n++;
      return _this.store.put(_this._key, data, function(error) {
        return callback(error, data.mean);
      });
    });
  };

  MeanStat.prototype.offset = function(oldValue, callback) {
    var _this = this;
    return this.store.get(this._key, function(error, data) {
      if (data == null) {
        data = {
          n: 0,
          mean: 0
        };
      }
      if (error) {
        return callback(error);
      }
      if (_this.cumulative) {
        return callback(null, data.mean);
      }
      data.mean = ((data.mean * data.n) - oldValue) / (data.n - 1);
      data.n--;
      return _this.store.put(_this._key, data, function(error) {
        return callback(error, data.mean);
      });
    });
  };

  return MeanStat;

})(Stat);

module.exports = {
  Stat: Stat,
  SumStat: SumStat,
  CountStat: CountStat,
  MeanStat: MeanStat
};
